// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/search/search.proto

package search

import (
	fmt "fmt"
	pagination "github.com/duolacloud/microbase/proto/pagination"
	proto "github.com/golang/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SearchService service

func NewSearchServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SearchService service

type SearchService interface {
	Create(ctx context.Context, in *Document, opts ...client.CallOption) (*emptypb.Empty, error)
	Upsert(ctx context.Context, in *Document, opts ...client.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *Document, opts ...client.CallOption) (*emptypb.Empty, error)
	BatchUpsert(ctx context.Context, in *BatchUpsertDocumentRequest, opts ...client.CallOption) (*BatchUpsertDocumentResponse, error)
	Get(ctx context.Context, in *GetDocumentRequest, opts ...client.CallOption) (*Document, error)
	BatchGet(ctx context.Context, in *BatchGetDocumentRequest, opts ...client.CallOption) (*BatchGetDocumentResponse, error)
	Delete(ctx context.Context, in *DeleteDocumentRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Page(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageResponse, error)
	// graphql 查询模式查询结果
	Connection(ctx context.Context, in *ConnectionRequest, opts ...client.CallOption) (*pagination.Connection, error)
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	IndexExists(ctx context.Context, in *IndexExistsRequest, opts ...client.CallOption) (*IndexExistsResponse, error)
}

type searchService struct {
	c    client.Client
	name string
}

func NewSearchService(name string, c client.Client) SearchService {
	return &searchService{
		c:    c,
		name: name,
	}
}

func (c *searchService) Create(ctx context.Context, in *Document, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SearchService.Create", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) Upsert(ctx context.Context, in *Document, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SearchService.Upsert", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) Update(ctx context.Context, in *Document, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SearchService.Update", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) BatchUpsert(ctx context.Context, in *BatchUpsertDocumentRequest, opts ...client.CallOption) (*BatchUpsertDocumentResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.BatchUpsert", in)
	out := new(BatchUpsertDocumentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) Get(ctx context.Context, in *GetDocumentRequest, opts ...client.CallOption) (*Document, error) {
	req := c.c.NewRequest(c.name, "SearchService.Get", in)
	out := new(Document)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) BatchGet(ctx context.Context, in *BatchGetDocumentRequest, opts ...client.CallOption) (*BatchGetDocumentResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.BatchGet", in)
	out := new(BatchGetDocumentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) Delete(ctx context.Context, in *DeleteDocumentRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SearchService.Delete", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) Page(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.Page", in)
	out := new(PageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) Connection(ctx context.Context, in *ConnectionRequest, opts ...client.CallOption) (*pagination.Connection, error) {
	req := c.c.NewRequest(c.name, "SearchService.Connection", in)
	out := new(pagination.Connection)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SearchService.CreateIndex", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "SearchService.DeleteIndex", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) IndexExists(ctx context.Context, in *IndexExistsRequest, opts ...client.CallOption) (*IndexExistsResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.IndexExists", in)
	out := new(IndexExistsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchService service

type SearchServiceHandler interface {
	Create(context.Context, *Document, *emptypb.Empty) error
	Upsert(context.Context, *Document, *emptypb.Empty) error
	Update(context.Context, *Document, *emptypb.Empty) error
	BatchUpsert(context.Context, *BatchUpsertDocumentRequest, *BatchUpsertDocumentResponse) error
	Get(context.Context, *GetDocumentRequest, *Document) error
	BatchGet(context.Context, *BatchGetDocumentRequest, *BatchGetDocumentResponse) error
	Delete(context.Context, *DeleteDocumentRequest, *emptypb.Empty) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Page(context.Context, *PageRequest, *PageResponse) error
	// graphql 查询模式查询结果
	Connection(context.Context, *ConnectionRequest, *pagination.Connection) error
	CreateIndex(context.Context, *CreateIndexRequest, *emptypb.Empty) error
	DeleteIndex(context.Context, *DeleteIndexRequest, *emptypb.Empty) error
	IndexExists(context.Context, *IndexExistsRequest, *IndexExistsResponse) error
}

func RegisterSearchServiceHandler(s server.Server, hdlr SearchServiceHandler, opts ...server.HandlerOption) error {
	type searchService interface {
		Create(ctx context.Context, in *Document, out *emptypb.Empty) error
		Upsert(ctx context.Context, in *Document, out *emptypb.Empty) error
		Update(ctx context.Context, in *Document, out *emptypb.Empty) error
		BatchUpsert(ctx context.Context, in *BatchUpsertDocumentRequest, out *BatchUpsertDocumentResponse) error
		Get(ctx context.Context, in *GetDocumentRequest, out *Document) error
		BatchGet(ctx context.Context, in *BatchGetDocumentRequest, out *BatchGetDocumentResponse) error
		Delete(ctx context.Context, in *DeleteDocumentRequest, out *emptypb.Empty) error
		Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Page(ctx context.Context, in *PageRequest, out *PageResponse) error
		Connection(ctx context.Context, in *ConnectionRequest, out *pagination.Connection) error
		CreateIndex(ctx context.Context, in *CreateIndexRequest, out *emptypb.Empty) error
		DeleteIndex(ctx context.Context, in *DeleteIndexRequest, out *emptypb.Empty) error
		IndexExists(ctx context.Context, in *IndexExistsRequest, out *IndexExistsResponse) error
	}
	type SearchService struct {
		searchService
	}
	h := &searchServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SearchService{h}, opts...))
}

type searchServiceHandler struct {
	SearchServiceHandler
}

func (h *searchServiceHandler) Create(ctx context.Context, in *Document, out *emptypb.Empty) error {
	return h.SearchServiceHandler.Create(ctx, in, out)
}

func (h *searchServiceHandler) Upsert(ctx context.Context, in *Document, out *emptypb.Empty) error {
	return h.SearchServiceHandler.Upsert(ctx, in, out)
}

func (h *searchServiceHandler) Update(ctx context.Context, in *Document, out *emptypb.Empty) error {
	return h.SearchServiceHandler.Update(ctx, in, out)
}

func (h *searchServiceHandler) BatchUpsert(ctx context.Context, in *BatchUpsertDocumentRequest, out *BatchUpsertDocumentResponse) error {
	return h.SearchServiceHandler.BatchUpsert(ctx, in, out)
}

func (h *searchServiceHandler) Get(ctx context.Context, in *GetDocumentRequest, out *Document) error {
	return h.SearchServiceHandler.Get(ctx, in, out)
}

func (h *searchServiceHandler) BatchGet(ctx context.Context, in *BatchGetDocumentRequest, out *BatchGetDocumentResponse) error {
	return h.SearchServiceHandler.BatchGet(ctx, in, out)
}

func (h *searchServiceHandler) Delete(ctx context.Context, in *DeleteDocumentRequest, out *emptypb.Empty) error {
	return h.SearchServiceHandler.Delete(ctx, in, out)
}

func (h *searchServiceHandler) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.SearchServiceHandler.Search(ctx, in, out)
}

func (h *searchServiceHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.SearchServiceHandler.List(ctx, in, out)
}

func (h *searchServiceHandler) Page(ctx context.Context, in *PageRequest, out *PageResponse) error {
	return h.SearchServiceHandler.Page(ctx, in, out)
}

func (h *searchServiceHandler) Connection(ctx context.Context, in *ConnectionRequest, out *pagination.Connection) error {
	return h.SearchServiceHandler.Connection(ctx, in, out)
}

func (h *searchServiceHandler) CreateIndex(ctx context.Context, in *CreateIndexRequest, out *emptypb.Empty) error {
	return h.SearchServiceHandler.CreateIndex(ctx, in, out)
}

func (h *searchServiceHandler) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, out *emptypb.Empty) error {
	return h.SearchServiceHandler.DeleteIndex(ctx, in, out)
}

func (h *searchServiceHandler) IndexExists(ctx context.Context, in *IndexExistsRequest, out *IndexExistsResponse) error {
	return h.SearchServiceHandler.IndexExists(ctx, in, out)
}
